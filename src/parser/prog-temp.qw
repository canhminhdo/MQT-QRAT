prog TELEPORT is
var
    q1, q2, q3: qubit;
    q4, q5, q6: qubit;
const
    a, b: complex;
    c, d: complex;
where
    | a |^2 + | b |^2 = 1;
    | c |^2 + | d |^2 = 1;
init
    q1 := a . |0> + b . |1>;
    q2 := |0>;
    q3 := |1>;
begin
    q2 := H[q2];
    q2, q3 := CX[q2, q3];
    q1, q2 := CX[q1, q2];
    q1 := H[q1];
    if M[q2] = 1 then q3 := X[q3]; else skip; fi;
    if M[q1] = 1 then q3 := Z[q3]; else skip; fi;
end

search in TELEPORT =>* q1 (x) q2 (x) q3 such that q3 == a . |0> + b . |1> ;
search in TELEPORT =>+ q1 (x) q2 (x) q3 such that q3 == a . |0> + b . |1> ;
search in TELEPORT =>! q1 (x) q2 (x) q3 such that q3 == a . |0> + b . |1> ;

search* in TELEPORT such that P(q1, a . |0> + b . |1>);
search+ in TELEPORT such that P(q1, a . |0> + b . |1>);
search! in TELEPORT such that P(q1, a . |0> + b . |1>);